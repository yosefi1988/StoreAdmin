//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplicationStoreAdmin.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class officia1_StoreEntities : DbContext
    {
        public officia1_StoreEntities()
            : base("name=officia1_StoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<BD_Cities> BD_Cities { get; set; }
        public virtual DbSet<BD_Country> BD_Country { get; set; }
        public virtual DbSet<BD_PaymentStatusTypes> BD_PaymentStatusTypes { get; set; }
        public virtual DbSet<BD_SendProductsPrice> BD_SendProductsPrice { get; set; }
        public virtual DbSet<BD_SendStatusTypes> BD_SendStatusTypes { get; set; }
        public virtual DbSet<BD_ShoppingBasketTypes> BD_ShoppingBasketTypes { get; set; }
        public virtual DbSet<BD_SizeTypes> BD_SizeTypes { get; set; }
        public virtual DbSet<BD_States> BD_States { get; set; }
        public virtual DbSet<BD_Tax> BD_Tax { get; set; }
        public virtual DbSet<SC_Admins> SC_Admins { get; set; }
        public virtual DbSet<SC_StoreDetails> SC_StoreDetails { get; set; }
        public virtual DbSet<SD_Addresses> SD_Addresses { get; set; }
        public virtual DbSet<SD_Category> SD_Category { get; set; }
        public virtual DbSet<SD_Color> SD_Color { get; set; }
        public virtual DbSet<SD_Coupons> SD_Coupons { get; set; }
        public virtual DbSet<SD_Images> SD_Images { get; set; }
        public virtual DbSet<SD_Product> SD_Product { get; set; }
        public virtual DbSet<SD_ProductCategories> SD_ProductCategories { get; set; }
        public virtual DbSet<SD_ProductCharges> SD_ProductCharges { get; set; }
        public virtual DbSet<SD_ProductChargesProperties> SD_ProductChargesProperties { get; set; }
        public virtual DbSet<SD_ProductSizes> SD_ProductSizes { get; set; }
        public virtual DbSet<SD_SendBoxs> SD_SendBoxs { get; set; }
        public virtual DbSet<SD_ShoppingBasket> SD_ShoppingBasket { get; set; }
        public virtual DbSet<SD_ShoppingBasketObjects> SD_ShoppingBasketObjects { get; set; }
        public virtual DbSet<SD_Transactions> SD_Transactions { get; set; }
        public virtual DbSet<SD_Users> SD_Users { get; set; }
        public virtual DbSet<SD_Votes> SD_Votes { get; set; }
        public virtual DbSet<BD_SendBoxPrices> BD_SendBoxPrices { get; set; }
        public virtual DbSet<C__EFMigrationsHistory> C__EFMigrationsHistory { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<employee> employees { get; set; }
        public virtual DbSet<View_Site_Home> View_Site_Home { get; set; }
        public virtual DbSet<View_Site_ProductDetails_Colors> View_Site_ProductDetails_Colors { get; set; }
        public virtual DbSet<View_Site_ProductDetails_SimilarProductInSize> View_Site_ProductDetails_SimilarProductInSize { get; set; }
        public virtual DbSet<View_Site_ProductDetails_Sizes> View_Site_ProductDetails_Sizes { get; set; }
        public virtual DbSet<View_User_BasketsObjects> View_User_BasketsObjects { get; set; }
        public virtual DbSet<View_Admin_ProductChargeID> View_Admin_ProductChargeID { get; set; }
        public virtual DbSet<View_Admin_ProductChargePropertiesID> View_Admin_ProductChargePropertiesID { get; set; }
        public virtual DbSet<View_Admin_ShoppingBasketID> View_Admin_ShoppingBasketID { get; set; }
        public virtual DbSet<View_Admin_TransactionID> View_Admin_TransactionID { get; set; }
        public virtual DbSet<View_Admin_Users> View_Admin_Users { get; set; }
        public virtual DbSet<View_Site_ProductDetails> View_Site_ProductDetails { get; set; }
        public virtual DbSet<View_Site_ProductDetails_SendPrices> View_Site_ProductDetails_SendPrices { get; set; }
        public virtual DbSet<View_User_Baskets> View_User_Baskets { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
